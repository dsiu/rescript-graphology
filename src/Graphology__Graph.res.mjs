// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Graphology from "graphology";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Graphology__SVG from "./Graphology__SVG.res.mjs";
import * as Graphology__Layout from "./Graphology__Layout.res.mjs";
import * as Graphology__Traversal from "./Graphology__Traversal.res.mjs";
import * as Graphology__SimplePath from "./Graphology__SimplePath.res.mjs";
import * as Graphology__ShortestPath from "./Graphology__ShortestPath.res.mjs";

function MakeGraph(C) {
  var _edgesVarArgsCall = function (t, edgesVarArgs, allFn, nodeFn, fromToFn) {
    if (typeof edgesVarArgs !== "object") {
      return allFn(t);
    } else if (edgesVarArgs.TAG === "Node") {
      return nodeFn(t, edgesVarArgs._0);
    } else {
      return fromToFn(t, edgesVarArgs._0, edgesVarArgs._1);
    }
  };
  var edges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.edges();
                }), (function (prim0, prim1) {
                  return prim0.edges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.edges(prim1, prim2);
                }));
  };
  var inEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.inEdges();
                }), (function (prim0, prim1) {
                  return prim0.inEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.inEdges(prim1, prim2);
                }));
  };
  var outEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.outEdges();
                }), (function (prim0, prim1) {
                  return prim0.outEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.outEdges(prim1, prim2);
                }));
  };
  var inboundEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.inboundEdges();
                }), (function (prim0, prim1) {
                  return prim0.inboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.inboundEdges(prim1, prim2);
                }));
  };
  var outboundEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.outboundEdges();
                }), (function (prim0, prim1) {
                  return prim0.outboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.outboundEdges(prim1, prim2);
                }));
  };
  var directedEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.directedEdges();
                }), (function (prim0, prim1) {
                  return prim0.directedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.directedEdges(prim1, prim2);
                }));
  };
  var undirectedEdges = function (t, edgesVarArgs) {
    return _edgesVarArgsCall(t, edgesVarArgs, (function (prim) {
                  return prim.undirectedEdges();
                }), (function (prim0, prim1) {
                  return prim0.undirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.undirectedEdges(prim1, prim2);
                }));
  };
  var _forEachEdgeVarArgsCall = function (t, forEachEdgeVarArgs, allFn, nodeFn, fromToFn) {
    switch (forEachEdgeVarArgs.TAG) {
      case "All" :
          return allFn(t, forEachEdgeVarArgs._0);
      case "Node" :
          return nodeFn(t, forEachEdgeVarArgs._0, forEachEdgeVarArgs._1);
      case "FromTo" :
          return fromToFn(t, forEachEdgeVarArgs._0, forEachEdgeVarArgs._1, forEachEdgeVarArgs._2);
      
    }
  };
  var forEachEdge = function (t, forEachEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachEdge(prim1, prim2, prim3);
          }));
  };
  var forEachInEdge = function (t, forEachInEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachInEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachInEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachInEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachInEdge(prim1, prim2, prim3);
          }));
  };
  var forEachOutEdge = function (t, forEachOutEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachOutEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachOutEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachOutEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachOutEdge(prim1, prim2, prim3);
          }));
  };
  var forEachInboundEdge = function (t, forEachInboundEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachInboundEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachInboundEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachInboundEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachInboundEdge(prim1, prim2, prim3);
          }));
  };
  var forEachOutboundEdge = function (t, forEachOutboundEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachOutboundEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachOutboundEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachOutboundEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachOutboundEdge(prim1, prim2, prim3);
          }));
  };
  var forEachDirectedEdge = function (t, forEachDirectedEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachDirectedEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachDirectedEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachDirectedEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachDirectedEdge(prim1, prim2, prim3);
          }));
  };
  var forEachUndirectedEdge = function (t, forEachUndirectedEdgeVarArgs) {
    _forEachEdgeVarArgsCall(t, forEachUndirectedEdgeVarArgs, (function (prim0, prim1) {
            prim0.forEachUndirectedEdge(prim1);
          }), (function (prim0, prim1, prim2) {
            prim0.forEachUndirectedEdge(prim1, prim2);
          }), (function (prim0, prim1, prim2, prim3) {
            prim0.forEachUndirectedEdge(prim1, prim2, prim3);
          }));
  };
  var _mapEdgesVarArgsCall = function (t, mapEdgesVarArgs, allFn, nodeFn, fromToFn) {
    switch (mapEdgesVarArgs.TAG) {
      case "All" :
          return allFn(t, mapEdgesVarArgs._0);
      case "Node" :
          return nodeFn(t, mapEdgesVarArgs._0, mapEdgesVarArgs._1);
      case "FromTo" :
          return fromToFn(t, mapEdgesVarArgs._0, mapEdgesVarArgs._1, mapEdgesVarArgs._2);
      
    }
  };
  var mapEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapEdges(prim1, prim2, prim3);
                }));
  };
  var mapInEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapInEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapInEdges(prim1, prim2, prim3);
                }));
  };
  var mapOutEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapOutEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapOutEdges(prim1, prim2, prim3);
                }));
  };
  var mapInboundEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapInboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapInboundEdges(prim1, prim2, prim3);
                }));
  };
  var mapOutboundEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapOutboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapOutboundEdges(prim1, prim2, prim3);
                }));
  };
  var mapDirectedEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapDirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapDirectedEdges(prim1, prim2, prim3);
                }));
  };
  var mapUndirectedEdges = function (t, mapEdgesVarArgs) {
    return _mapEdgesVarArgsCall(t, mapEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.mapUndirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.mapEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.mapUndirectedEdges(prim1, prim2, prim3);
                }));
  };
  var _filterEdgesVarArgsCall = function (t, filterEdgesVarArgs, allFn, nodeFn, fromToFn) {
    switch (filterEdgesVarArgs.TAG) {
      case "All" :
          return allFn(t, filterEdgesVarArgs._0);
      case "Node" :
          return nodeFn(t, filterEdgesVarArgs._0, filterEdgesVarArgs._1);
      case "FromTo" :
          return fromToFn(t, filterEdgesVarArgs._0, filterEdgesVarArgs._1, filterEdgesVarArgs._2);
      
    }
  };
  var filterEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterEdges(prim1, prim2, prim3);
                }));
  };
  var filterInEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterInEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterInEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterInEdges(prim1, prim2, prim3);
                }));
  };
  var filterOutEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterOutEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterOutEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterOutEdges(prim1, prim2, prim3);
                }));
  };
  var filterInboundEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterInboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterInboundEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterInboundEdges(prim1, prim2, prim3);
                }));
  };
  var filterOutboundEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterOutboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterOutboundEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterOutboundEdges(prim1, prim2, prim3);
                }));
  };
  var filterDirectedEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterDirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterDirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterDirectedEdges(prim1, prim2, prim3);
                }));
  };
  var filterUndirectedEdges = function (t, filterEdgesVarArgs) {
    return _filterEdgesVarArgsCall(t, filterEdgesVarArgs, (function (prim0, prim1) {
                  return prim0.filterUndirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.filterUndirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.filterUndirectedEdges(prim1, prim2, prim3);
                }));
  };
  var _reduceEdgesVarArgsCall = function (t, reduceEdgesVarArgs, allFn, nodeFn, fromToFn) {
    switch (reduceEdgesVarArgs.TAG) {
      case "All" :
          return allFn(t, reduceEdgesVarArgs._0, reduceEdgesVarArgs._1);
      case "Node" :
          return nodeFn(t, reduceEdgesVarArgs._0, reduceEdgesVarArgs._1, reduceEdgesVarArgs._2);
      case "FromTo" :
          return fromToFn(t, reduceEdgesVarArgs._0, reduceEdgesVarArgs._1, reduceEdgesVarArgs._2, reduceEdgesVarArgs._3);
      
    }
  };
  var reduceEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var reduceInEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceInEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceInEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceInEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var reduceOutEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceOutEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceOutEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceOutEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var reduceOutboundEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceOutboundEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceOutboundEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceOutboundEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var reduceDirectedEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceDirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceDirectedEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceDirectedEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var reduceUndirectedEdges = function (t, reduceEdgesVarArgs) {
    return _reduceEdgesVarArgsCall(t, reduceEdgesVarArgs, (function (prim0, prim1, prim2) {
                  return prim0.reduceUndirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.reduceUndirectedEdges(prim1, prim2, prim3);
                }), (function (prim0, prim1, prim2, prim3, prim4) {
                  return prim0.reduceUndirectedEdges(prim1, prim2, prim3, prim4);
                }));
  };
  var _findEdgeVarArgsCall = function (t, findEdgeVarArgs, allFn, nodeFn, fromToFn) {
    switch (findEdgeVarArgs.TAG) {
      case "All" :
          return allFn(t, findEdgeVarArgs._0);
      case "Node" :
          return nodeFn(t, findEdgeVarArgs._0, findEdgeVarArgs._1);
      case "FromTo" :
          return fromToFn(t, findEdgeVarArgs._0, findEdgeVarArgs._1, findEdgeVarArgs._2);
      
    }
  };
  var findEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findEdges(prim1, prim2, prim3);
                }));
  };
  var findInEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findInEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findInEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findInEdges(prim1, prim2, prim3);
                }));
  };
  var findOutEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findOutEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findOutEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findOutEdges(prim1, prim2, prim3);
                }));
  };
  var findInboundEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findInboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findInboundEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findInboundEdges(prim1, prim2, prim3);
                }));
  };
  var findOutboundEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findOutboundEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findOutboundEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findOutboundEdges(prim1, prim2, prim3);
                }));
  };
  var findDirectedEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findDirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findDirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findDirectedEdges(prim1, prim2, prim3);
                }));
  };
  var findUndirectedEdge = function (t, findEdgeVarArgs) {
    return _findEdgeVarArgsCall(t, findEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.findUndirectedEdges(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.findUndirectedEdges(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.findUndirectedEdges(prim1, prim2, prim3);
                }));
  };
  var _someEdgeVarArgsCall = function (t, someEdgeVarArgs, allFn, nodeFn, fromToFn) {
    switch (someEdgeVarArgs.TAG) {
      case "All" :
          return allFn(t, someEdgeVarArgs._0);
      case "Node" :
          return nodeFn(t, someEdgeVarArgs._0, someEdgeVarArgs._1);
      case "FromTo" :
          return fromToFn(t, someEdgeVarArgs._0, someEdgeVarArgs._1, someEdgeVarArgs._2);
      
    }
  };
  var someEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someEdge(prim1, prim2, prim3);
                }));
  };
  var someInEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someInEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someInEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someInEdge(prim1, prim2, prim3);
                }));
  };
  var someOutEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someOutEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someOutEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someOutEdge(prim1, prim2, prim3);
                }));
  };
  var someInboundEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someInboundEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someInboundEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someInboundEdge(prim1, prim2, prim3);
                }));
  };
  var someOutboundEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someOutboundEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someOutboundEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someOutboundEdge(prim1, prim2, prim3);
                }));
  };
  var someDirectedEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someDirectedEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someDirectedEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someDirectedEdge(prim1, prim2, prim3);
                }));
  };
  var someUndirectedEdge = function (t, someEdgeVarArgs) {
    return _someEdgeVarArgsCall(t, someEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.someUndirectedEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.someUndirectedEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.someUndirectedEdge(prim1, prim2, prim3);
                }));
  };
  var _everyEdgeVarArgsCall = function (t, everyEdgeVarArgs, allFn, nodeFn, fromToFn) {
    switch (everyEdgeVarArgs.TAG) {
      case "All" :
          return allFn(t, everyEdgeVarArgs._0);
      case "Node" :
          return nodeFn(t, everyEdgeVarArgs._0, everyEdgeVarArgs._1);
      case "FromTo" :
          return fromToFn(t, everyEdgeVarArgs._0, everyEdgeVarArgs._1, everyEdgeVarArgs._2);
      
    }
  };
  var everyEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyEdge(prim1, prim2, prim3);
                }));
  };
  var everyInEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyInEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyInEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyInEdge(prim1, prim2, prim3);
                }));
  };
  var everyOutEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyOutEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyOutEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyOutEdge(prim1, prim2, prim3);
                }));
  };
  var everyInboundEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyInboundEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyInboundEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyInboundEdge(prim1, prim2, prim3);
                }));
  };
  var everyOutboundEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyOutboundEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyOutboundEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyOutboundEdge(prim1, prim2, prim3);
                }));
  };
  var everyDirectedEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyDirectedEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyDirectedEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyDirectedEdge(prim1, prim2, prim3);
                }));
  };
  var everyUndirectedEdge = function (t, everyEdgeVarArgs) {
    return _everyEdgeVarArgsCall(t, everyEdgeVarArgs, (function (prim0, prim1) {
                  return prim0.everyUndirectedEdge(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.everyUndirectedEdge(prim1, prim2);
                }), (function (prim0, prim1, prim2, prim3) {
                  return prim0.everyUndirectedEdge(prim1, prim2, prim3);
                }));
  };
  var _edgeEntriesVarArgsCall = function (t, edgeEntriesVarArgs, allFn, nodeFn, fromToFn) {
    if (typeof edgeEntriesVarArgs !== "object") {
      return allFn(t);
    } else if (edgeEntriesVarArgs.TAG === "Node") {
      return nodeFn(t, edgeEntriesVarArgs._0);
    } else {
      return fromToFn(t, edgeEntriesVarArgs._0, edgeEntriesVarArgs._1);
    }
  };
  var edgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.edgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.edgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.edgeEntries(prim1, prim2);
                }));
  };
  var inEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.inEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.inEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.inEdgeEntries(prim1, prim2);
                }));
  };
  var outEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.outEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.outEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.outEdgeEntries(prim1, prim2);
                }));
  };
  var inboundEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.inboundEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.inboundEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.inboundEdgeEntries(prim1, prim2);
                }));
  };
  var outboundEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.outboundEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.outboundEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.outboundEdgeEntries(prim1, prim2);
                }));
  };
  var directedEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.directedEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.directedEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.directedEdgeEntries(prim1, prim2);
                }));
  };
  var undirectedEdgeEntries = function (t, edgeEntriesVarArgs) {
    return _edgeEntriesVarArgsCall(t, edgeEntriesVarArgs, (function (prim) {
                  return prim.undirectedEdgeEntries();
                }), (function (prim0, prim1) {
                  return prim0.undirectedEdgeEntries(prim1);
                }), (function (prim0, prim1, prim2) {
                  return prim0.undirectedEdgeEntries(prim1, prim2);
                }));
  };
  var Layout = Graphology__Layout.MakeLayout({});
  var ShortestPath = Graphology__ShortestPath.MakeShortestPath({});
  var SimplePath = Graphology__SimplePath.MakeSimplePath({});
  var SVG = Graphology__SVG.MakeSVG({});
  var Traversal = Graphology__Traversal.MakeTraversal({});
  return {
          makeGraph: (function (prim) {
              return new (Graphology.default.Graph)(prim !== undefined ? Caml_option.valFromOption(prim) : undefined);
            }),
          makeDirectedGraph: (function (prim) {
              return new (Graphology.default.DirectedGraph)();
            }),
          makeUndirectedGraph: (function (prim) {
              return new (Graphology.default.UndirectedGraph)();
            }),
          makeMultiGraph: (function (prim) {
              return new (Graphology.default.MultiGraph)();
            }),
          makeMultiDirectedGraph: (function (prim) {
              return new Graphology.MultiDirectedGraph();
            }),
          makeMultiUndirectedGraph: (function (prim) {
              return new Graphology.MultiUndirectedGraph();
            }),
          from: (function (prim0, prim1) {
              return Graphology.Graph.from(prim0, prim1 !== undefined ? Caml_option.valFromOption(prim1) : undefined);
            }),
          fromDirectedGraph: (function (prim) {
              return Graphology.DirectedGraph.from(prim);
            }),
          fromUndirectedGraph: (function (prim) {
              return Graphology.UndirectedGraph.from(prim);
            }),
          fromMultiGraph: (function (prim) {
              return Graphology.MultiGraph.from(prim);
            }),
          fromMultiDirectedGraph: (function (prim) {
              return Graphology.MultiDirectedGraph.from(prim);
            }),
          fromMultiUndirectedGraph: (function (prim) {
              return Graphology.MultiUndirectedGraph.from(prim);
            }),
          order: (function (prim) {
              return prim.order;
            }),
          size: (function (prim) {
              return prim.size;
            }),
          type_: (function (prim) {
              return prim.type;
            }),
          multi: (function (prim) {
              return prim.multi;
            }),
          allowSelfLoops: (function (prim) {
              return prim.allowSelfLoops;
            }),
          selfLoopCount: (function (prim) {
              return prim.selfLoopCount;
            }),
          implementation: (function (prim) {
              return prim.implementation;
            }),
          hasNode: (function (prim0, prim1) {
              return prim0.hasNode(prim1);
            }),
          hasEdge: (function (prim0, prim1) {
              return prim0.hasEdge(prim1);
            }),
          edge: (function (prim0, prim1, prim2) {
              return prim0.edge(prim1, prim2);
            }),
          degree: (function (prim0, prim1) {
              return prim0.degree(prim1);
            }),
          degreeWithoutSelfLoops: (function (prim0, prim1) {
              return prim0.degreeWithoutSelfLoops(prim1);
            }),
          source: (function (prim0, prim1) {
              return prim0.source(prim1);
            }),
          target: (function (prim0, prim1) {
              return prim0.target(prim1);
            }),
          opposite: (function (prim0, prim1, prim2) {
              return prim0.opposite(prim1, prim2);
            }),
          extremities: (function (prim0, prim1) {
              return prim0.extremities(prim1);
            }),
          hasExtremity: (function (prim0, prim1, prim2) {
              return prim0.hasExtremity(prim1, prim2);
            }),
          isDirected: (function (prim0, prim1) {
              return prim0.isDirected(prim1);
            }),
          isSelfLoop: (function (prim0, prim1) {
              return prim0.isSelfLoop(prim1);
            }),
          areNeighbors: (function (prim0, prim1, prim2) {
              return prim0.areNeighbors(prim1, prim2);
            }),
          addNode: (function (prim0, prim1, prim2) {
              prim0.addNode(prim1, prim2 !== undefined ? Caml_option.valFromOption(prim2) : undefined);
            }),
          mergeNode: (function (prim0, prim1, prim2) {
              return prim0.mergeNode(prim1, prim2 !== undefined ? Caml_option.valFromOption(prim2) : undefined);
            }),
          updateNode: (function (prim0, prim1, prim2) {
              return prim0.updateNode(prim1, prim2);
            }),
          addEdge: (function (prim0, prim1, prim2, prim3) {
              prim0.addEdge(prim1, prim2, prim3 !== undefined ? Caml_option.valFromOption(prim3) : undefined);
            }),
          addEdgeWithKey: (function (prim0, prim1, prim2, prim3, prim4) {
              prim0.addEdgeWithKey(prim1, prim2, prim3, prim4 !== undefined ? Caml_option.valFromOption(prim4) : undefined);
            }),
          mergeEdge: (function (prim0, prim1, prim2, prim3) {
              return prim0.mergeEdge(prim1, prim2, prim3 !== undefined ? Caml_option.valFromOption(prim3) : undefined);
            }),
          mergeEdgeWithKey: (function (prim0, prim1, prim2, prim3, prim4) {
              return prim0.mergeEdgeWithKey(prim1, prim2, prim3, prim4 !== undefined ? Caml_option.valFromOption(prim4) : undefined);
            }),
          updateEdge: (function (prim0, prim1, prim2, prim3) {
              return prim0.updateEdge(prim1, prim2, prim3);
            }),
          updateEdgeWithKey: (function (prim0, prim1, prim2, prim3, prim4) {
              return prim0.updateEdgeWithKey(prim1, prim2, prim3, prim4);
            }),
          dropEdge: (function (prim0, prim1) {
              prim0.dropEdge(prim1);
            }),
          dropNode: (function (prim0, prim1) {
              prim0.dropNode(prim1);
            }),
          clear: (function (prim) {
              prim.clear();
            }),
          clearEdges: (function (prim) {
              prim.clearEdges();
            }),
          getAttribute: (function (prim0, prim1) {
              return prim0.getAttribute(prim1);
            }),
          getAttributes: (function (prim) {
              return prim.getAttributes();
            }),
          hasAttribute: (function (prim0, prim1) {
              return prim0.hasAttribute(prim1);
            }),
          setAttribute: (function (prim0, prim1, prim2) {
              prim0.setAttribute(prim1, prim2);
            }),
          updateAttribute: (function (prim0, prim1, prim2) {
              prim0.updateAttribute(prim1, prim2);
            }),
          removeAttribute: (function (prim0, prim1) {
              prim0.removeAttribute(prim1);
            }),
          replaceAttributes: (function (prim0, prim1) {
              prim0.replaceAttributes(prim1);
            }),
          mergeAttributes: (function (prim0, prim1) {
              prim0.mergeAttributes(prim1);
            }),
          updateAttributes: (function (prim0, prim1) {
              prim0.updateAttributes(prim1);
            }),
          getNodeAttribute: (function (prim0, prim1, prim2) {
              return prim0.getNodeAttribute(prim1, prim2);
            }),
          getNodeAttributes: (function (prim0, prim1) {
              return prim0.getNodeAttributes(prim1);
            }),
          hasNodeAttribute: (function (prim0, prim1, prim2) {
              return prim0.hasNodeAttribute(prim1, prim2);
            }),
          setNodeAttribute: (function (prim0, prim1, prim2, prim3) {
              prim0.setNodeAttribute(prim1, prim2, prim3);
            }),
          updateNodeAttribute: (function (prim0, prim1, prim2, prim3) {
              prim0.updateNodeAttribute(prim1, prim2, prim3);
            }),
          removeNodeAttribute: (function (prim0, prim1, prim2) {
              prim0.removeNodeAttribute(prim1, prim2);
            }),
          replaceNodeAttributes: (function (prim0, prim1, prim2) {
              prim0.replaceNodeAttributes(prim1, prim2);
            }),
          mergeNodeAttributes: (function (prim0, prim1, prim2) {
              prim0.mergeNodeAttributes(prim1, prim2);
            }),
          updateNodeAttributes: (function (prim0, prim1, prim2) {
              prim0.updateNodeAttributes(prim1, prim2);
            }),
          updateEachNodeAttributes: (function (prim0, prim1) {
              prim0.updateEachNodeAttributes(prim1);
            }),
          getEdgeAttribute: (function (prim0, prim1, prim2) {
              return prim0.getEdgeAttribute(prim1, prim2);
            }),
          getEdgeAttributes: (function (prim0, prim1) {
              return prim0.getEdgeAttributes(prim1);
            }),
          hasEdgeAttribute: (function (prim0, prim1, prim2) {
              return prim0.hasEdgeAttribute(prim1, prim2);
            }),
          setEdgeAttribute: (function (prim0, prim1, prim2, prim3) {
              prim0.setEdgeAttribute(prim1, prim2, prim3);
            }),
          updateEdgeAttribute: (function (prim0, prim1, prim2, prim3) {
              prim0.updateEdgeAttribute(prim1, prim2, prim3);
            }),
          removeEdgeAttribute: (function (prim0, prim1, prim2) {
              prim0.removeEdgeAttribute(prim1, prim2);
            }),
          replaceEdgeAttributes: (function (prim0, prim1, prim2) {
              prim0.replaceEdgeAttributes(prim1, prim2);
            }),
          mergeEdgeAttributes: (function (prim0, prim1, prim2) {
              prim0.mergeEdgeAttributes(prim1, prim2);
            }),
          updateEdgeAttributes: (function (prim0, prim1, prim2) {
              prim0.updateEdgeAttributes(prim1, prim2);
            }),
          updateEachEdgeAttributes: (function (prim0, prim1) {
              prim0.updateEachEdgeAttributes(prim1);
            }),
          nodes: (function (prim) {
              return prim.nodes();
            }),
          forEachNode: (function (prim0, prim1) {
              prim0.forEachNode(prim1);
            }),
          mapNodes: (function (prim0, prim1) {
              return prim0.mapNodes(prim1);
            }),
          filterNodes: (function (prim0, prim1) {
              return prim0.filterNodes(prim1);
            }),
          reduceNodes: (function (prim0, prim1, prim2) {
              return prim0.reduceNodes(prim1, prim2);
            }),
          findNode: (function (prim0, prim1) {
              return prim0.findNode(prim1);
            }),
          someNode: (function (prim0, prim1) {
              return prim0.someNode(prim1);
            }),
          everyNode: (function (prim0, prim1) {
              return prim0.everyNode(prim1);
            }),
          nodeEntries: (function (prim) {
              return prim.nodeEntries();
            }),
          edges: edges,
          inEdges: inEdges,
          outEdges: outEdges,
          inboundEdges: inboundEdges,
          outboundEdges: outboundEdges,
          directedEdges: directedEdges,
          undirectedEdges: undirectedEdges,
          forEachEdge: forEachEdge,
          forEachInEdge: forEachInEdge,
          forEachOutEdge: forEachOutEdge,
          forEachInboundEdge: forEachInboundEdge,
          forEachOutboundEdge: forEachOutboundEdge,
          forEachDirectedEdge: forEachDirectedEdge,
          forEachUndirectedEdge: forEachUndirectedEdge,
          mapEdges: mapEdges,
          mapInEdges: mapInEdges,
          mapOutEdges: mapOutEdges,
          mapInboundEdges: mapInboundEdges,
          mapOutboundEdges: mapOutboundEdges,
          mapDirectedEdges: mapDirectedEdges,
          mapUndirectedEdges: mapUndirectedEdges,
          filterEdges: filterEdges,
          filterInEdges: filterInEdges,
          filterOutEdges: filterOutEdges,
          filterInboundEdges: filterInboundEdges,
          filterOutboundEdges: filterOutboundEdges,
          filterDirectedEdges: filterDirectedEdges,
          filterUndirectedEdges: filterUndirectedEdges,
          reduceEdges: reduceEdges,
          reduceInEdges: reduceInEdges,
          reduceOutEdges: reduceOutEdges,
          reduceOutboundEdges: reduceOutboundEdges,
          reduceDirectedEdges: reduceDirectedEdges,
          reduceUndirectedEdges: reduceUndirectedEdges,
          findEdge: findEdge,
          findInEdge: findInEdge,
          findOutEdge: findOutEdge,
          findInboundEdge: findInboundEdge,
          findOutboundEdge: findOutboundEdge,
          findDirectedEdge: findDirectedEdge,
          findUndirectedEdge: findUndirectedEdge,
          someEdge: someEdge,
          someInEdge: someInEdge,
          someOutEdge: someOutEdge,
          someInboundEdge: someInboundEdge,
          someOutboundEdge: someOutboundEdge,
          someDirectedEdge: someDirectedEdge,
          someUndirectedEdge: someUndirectedEdge,
          everyEdge: everyEdge,
          everyInEdge: everyInEdge,
          everyOutEdge: everyOutEdge,
          everyInboundEdge: everyInboundEdge,
          everyOutboundEdge: everyOutboundEdge,
          everyDirectedEdge: everyDirectedEdge,
          everyUndirectedEdge: everyUndirectedEdge,
          edgeEntries: edgeEntries,
          inEdgeEntries: inEdgeEntries,
          outEdgeEntries: outEdgeEntries,
          inboundEdgeEntries: inboundEdgeEntries,
          outboundEdgeEntries: outboundEdgeEntries,
          directedEdgeEntries: directedEdgeEntries,
          undirectedEdgeEntries: undirectedEdgeEntries,
          neighbors: (function (prim) {
              return prim.neighbors();
            }),
          forEachNeighbor: (function (prim0, prim1) {
              prim0.forEachNeighbor(prim1);
            }),
          mapNeighbors: (function (prim0, prim1) {
              return prim0.mapNeighbors(prim1);
            }),
          filterNeighbors: (function (prim0, prim1) {
              return prim0.filterNeighbors(prim1);
            }),
          reduceNeighbors: (function (prim0, prim1, prim2) {
              return prim0.reduceNeighbors(prim1, prim2);
            }),
          findNeighbor: (function (prim0, prim1) {
              return prim0.findNeighbor(prim1);
            }),
          someNeighbor: (function (prim0, prim1) {
              return prim0.someNeighbor(prim1);
            }),
          everyNeighbor: (function (prim0, prim1) {
              return prim0.everyNeighbor(prim1);
            }),
          neighborEntries: (function (prim) {
              return prim.neighborEntries();
            }),
          $$import: (function (prim0, prim1, prim2) {
              prim0.import(prim1, prim2 !== undefined ? Caml_option.valFromOption(prim2) : undefined);
            }),
          $$export: (function (prim) {
              return prim.export();
            }),
          inspect: (function (prim) {
              return prim.inspect();
            }),
          Layout: Layout,
          ShortestPath: ShortestPath,
          SimplePath: SimplePath,
          SVG: SVG,
          Traversal: Traversal
        };
}

export {
  MakeGraph ,
}
/* graphology Not a pure module */
