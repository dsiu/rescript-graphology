// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Graph from "./Graph.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

var G = Graph.MakeGraph({});

var g = G.makeGraph();

var gg = G.makeDirectedGraph();

G.addNode(g, "John", undefined);

var H = Graph.MakeGraph({});

var h = H.makeGraph();

console.log("hi");

H.addNode(h, 1, {
      name: "John"
    });

H.addNode(h, 2, {
      name: "Peter"
    });

H.addNode(h, 3, {
      name: "Ken"
    });

H.addEdge(h, 1, 2, {
      dist: 23
    });

H.addEdge(h, 2, 3, {
      dist: 1
    });

((function (__x) {
        console.log("inspect", __x);
      })(H.inspect(h)));

H.forEachNode(h, (function (n, attr) {
        console.log(n);
        console.log(attr);
      }));

((function (__x) {
        console.log("mapNodes", __x);
      })(H.mapNodes(h, (function (n, attr) {
              return H.degree(h, n).toString() + " diu";
            }))));

var iter = H.nodeEntries(h);

((function (__x) {
        console.log("iter", __x);
      })(iter));

var arr = Array.from(iter);

((function (__x) {
        console.log("arr", __x);
      })(arr));

var arr2 = arr.map(function (param) {
      var attributes = param.attributes;
      var node = param.node;
      console.log(node);
      console.log(attributes);
      return node.toString() + " - " + attributes.name;
    });

console.log(arr2);

H.Traversal.bfs(h, (function (n, att, depth) {
        console.log(n);
        console.log(att);
        console.log(depth);
      }));

H.Traversal.dfs(h, (function (n, att, depth) {
        console.log(n);
        console.log(att);
        console.log(depth);
      }));

H.Traversal.bfsFromNode(h, 1, (function (n, att, depth) {
        console.log(n);
        console.log(att);
        console.log(depth);
      }));

((function (__x) {
        console.log("shortestPath bidirection", __x);
      })(H.ShortestPath.Unweighted.bidirectional(h, 1, 2)));

((function (__x) {
        console.log("shortestPath singleSource", __x);
      })(H.ShortestPath.Unweighted.singleSource(h, 1)));

export {
  log ,
  log2 ,
  G ,
  g ,
  gg ,
  H ,
  h ,
  iter ,
  arr ,
  arr2 ,
}
/* G Not a pure module */
