// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Graphology from "graphology";
import * as Graphology__SVG from "./Graphology__SVG.mjs";
import * as Graphology__GEXF from "./Graphology__GEXF.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Graphology__Utils from "./Graphology__Utils.mjs";
import * as Graphology__Layout from "./Graphology__Layout.mjs";
import * as Graphology__Traversal from "./Graphology__Traversal.mjs";
import * as Graphology__Generators from "./Graphology__Generators.mjs";
import * as Graphology__SimplePath from "./Graphology__SimplePath.mjs";
import * as Graphology__ShortestPath from "./Graphology__ShortestPath.mjs";
import * as Graphology__Graph_EdgesIter from "./Graphology__Graph_EdgesIter.mjs";
import * as Graphology__Graph_NodesIter from "./Graphology__Graph_NodesIter.mjs";
import * as Graphology__Graph_NeighborsIter from "./Graphology__Graph_NeighborsIter.mjs";

function MakeGraph(C) {
  let NodesIter = Graphology__Graph_NodesIter.MakeNodesIter({});
  let EdgesIter = Graphology__Graph_EdgesIter.MakeEdgesIter({});
  let NeighborsIter = Graphology__Graph_NeighborsIter.MakeNeighborsIter({});
  let Generators = Graphology__Generators.MakeGenerators({});
  let Layout = Graphology__Layout.MakeLayout({});
  let ShortestPath = Graphology__ShortestPath.MakeShortestPath({});
  let SimplePath = Graphology__SimplePath.MakeSimplePath({});
  let SVG = Graphology__SVG.MakeSVG({});
  let GEXF = Graphology__GEXF.MakeGEXF({});
  let Traversal = Graphology__Traversal.MakeTraversal({});
  let Utils = Graphology__Utils.MakeUtils({});
  return {
    makeGraph: prim => new (Graphology.default.Graph)(prim !== undefined ? Primitive_option.valFromOption(prim) : undefined),
    makeDirectedGraph: prim => new (Graphology.default.DirectedGraph)(),
    makeUndirectedGraph: prim => new (Graphology.default.UndirectedGraph)(),
    makeMultiGraph: prim => new (Graphology.default.MultiGraph)(),
    makeMultiDirectedGraph: prim => new (Graphology.default.MultiDirectedGraph)(),
    makeMultiUndirectedGraph: prim => new (Graphology.default.MultiUndirectedGraph)(),
    from: (prim0, prim1) => Graphology.Graph.from(prim0, prim1 !== undefined ? Primitive_option.valFromOption(prim1) : undefined),
    fromDirectedGraph: prim => Graphology.DirectedGraph.from(prim),
    fromUndirectedGraph: prim => Graphology.UndirectedGraph.from(prim),
    fromMultiGraph: prim => Graphology.MultiGraph.from(prim),
    fromMultiDirectedGraph: prim => Graphology.MultiDirectedGraph.from(prim),
    fromMultiUndirectedGraph: prim => Graphology.MultiUndirectedGraph.from(prim),
    order: prim => prim.order,
    size: prim => prim.size,
    type_: prim => prim.type,
    multi: prim => prim.multi,
    allowSelfLoops: prim => prim.allowSelfLoops,
    selfLoopCount: prim => prim.selfLoopCount,
    implementation: prim => prim.implementation,
    hasNode: (prim0, prim1) => prim0.hasNode(prim1),
    hasEdge: (prim0, prim1) => prim0.hasEdge(prim1),
    edge: (prim0, prim1, prim2) => prim0.edge(prim1, prim2),
    degree: (prim0, prim1) => prim0.degree(prim1),
    degreeWithoutSelfLoops: (prim0, prim1) => prim0.degreeWithoutSelfLoops(prim1),
    source: (prim0, prim1) => prim0.source(prim1),
    target: (prim0, prim1) => prim0.target(prim1),
    opposite: (prim0, prim1, prim2) => prim0.opposite(prim1, prim2),
    extremities: (prim0, prim1) => prim0.extremities(prim1),
    hasExtremity: (prim0, prim1, prim2) => prim0.hasExtremity(prim1, prim2),
    isDirected: (prim0, prim1) => prim0.isDirected(prim1),
    isSelfLoop: (prim0, prim1) => prim0.isSelfLoop(prim1),
    areNeighbors: (prim0, prim1, prim2) => prim0.areNeighbors(prim1, prim2),
    addNode: (prim0, prim1, prim2) => {
      prim0.addNode(prim1, prim2 !== undefined ? Primitive_option.valFromOption(prim2) : undefined);
    },
    mergeNode: (prim0, prim1, prim2) => prim0.mergeNode(prim1, prim2 !== undefined ? Primitive_option.valFromOption(prim2) : undefined),
    updateNode: (prim0, prim1, prim2) => prim0.updateNode(prim1, prim2),
    addEdge: (prim0, prim1, prim2, prim3) => {
      prim0.addEdge(prim1, prim2, prim3 !== undefined ? Primitive_option.valFromOption(prim3) : undefined);
    },
    addEdgeWithKey: (prim0, prim1, prim2, prim3, prim4) => {
      prim0.addEdgeWithKey(prim1, prim2, prim3, prim4 !== undefined ? Primitive_option.valFromOption(prim4) : undefined);
    },
    mergeEdge: (prim0, prim1, prim2, prim3) => prim0.mergeEdge(prim1, prim2, prim3 !== undefined ? Primitive_option.valFromOption(prim3) : undefined),
    mergeEdgeWithKey: (prim0, prim1, prim2, prim3, prim4) => prim0.mergeEdgeWithKey(prim1, prim2, prim3, prim4 !== undefined ? Primitive_option.valFromOption(prim4) : undefined),
    updateEdge: (prim0, prim1, prim2, prim3) => prim0.updateEdge(prim1, prim2, prim3),
    updateEdgeWithKey: (prim0, prim1, prim2, prim3, prim4) => prim0.updateEdgeWithKey(prim1, prim2, prim3, prim4),
    dropEdge: (prim0, prim1) => {
      prim0.dropEdge(prim1);
    },
    dropNode: (prim0, prim1) => {
      prim0.dropNode(prim1);
    },
    clear: prim => {
      prim.clear();
    },
    clearEdges: prim => {
      prim.clearEdges();
    },
    getAttribute: (prim0, prim1) => prim0.getAttribute(prim1),
    getAttributes: prim => prim.getAttributes(),
    hasAttribute: (prim0, prim1) => prim0.hasAttribute(prim1),
    setAttribute: (prim0, prim1, prim2) => {
      prim0.setAttribute(prim1, prim2);
    },
    updateAttribute: (prim0, prim1, prim2) => {
      prim0.updateAttribute(prim1, prim2);
    },
    removeAttribute: (prim0, prim1) => {
      prim0.removeAttribute(prim1);
    },
    replaceAttributes: (prim0, prim1) => {
      prim0.replaceAttributes(prim1);
    },
    mergeAttributes: (prim0, prim1) => {
      prim0.mergeAttributes(prim1);
    },
    updateAttributes: (prim0, prim1) => {
      prim0.updateAttributes(prim1);
    },
    getNodeAttribute: (prim0, prim1, prim2) => prim0.getNodeAttribute(prim1, prim2),
    getNodeAttributes: (prim0, prim1) => prim0.getNodeAttributes(prim1),
    hasNodeAttribute: (prim0, prim1, prim2) => prim0.hasNodeAttribute(prim1, prim2),
    setNodeAttribute: (prim0, prim1, prim2, prim3) => {
      prim0.setNodeAttribute(prim1, prim2, prim3);
    },
    updateNodeAttribute: (prim0, prim1, prim2, prim3) => {
      prim0.updateNodeAttribute(prim1, prim2, prim3);
    },
    removeNodeAttribute: (prim0, prim1, prim2) => {
      prim0.removeNodeAttribute(prim1, prim2);
    },
    replaceNodeAttributes: (prim0, prim1, prim2) => {
      prim0.replaceNodeAttributes(prim1, prim2);
    },
    mergeNodeAttributes: (prim0, prim1, prim2) => {
      prim0.mergeNodeAttributes(prim1, prim2);
    },
    updateNodeAttributes: (prim0, prim1, prim2) => {
      prim0.updateNodeAttributes(prim1, prim2);
    },
    updateEachNodeAttributes: (prim0, prim1) => {
      prim0.updateEachNodeAttributes(prim1);
    },
    getEdgeAttribute: (prim0, prim1, prim2) => prim0.getEdgeAttribute(prim1, prim2),
    getEdgeAttributes: (prim0, prim1) => prim0.getEdgeAttributes(prim1),
    hasEdgeAttribute: (prim0, prim1, prim2) => prim0.hasEdgeAttribute(prim1, prim2),
    setEdgeAttribute: (prim0, prim1, prim2, prim3) => {
      prim0.setEdgeAttribute(prim1, prim2, prim3);
    },
    updateEdgeAttribute: (prim0, prim1, prim2, prim3) => {
      prim0.updateEdgeAttribute(prim1, prim2, prim3);
    },
    removeEdgeAttribute: (prim0, prim1, prim2) => {
      prim0.removeEdgeAttribute(prim1, prim2);
    },
    replaceEdgeAttributes: (prim0, prim1, prim2) => {
      prim0.replaceEdgeAttributes(prim1, prim2);
    },
    mergeEdgeAttributes: (prim0, prim1, prim2) => {
      prim0.mergeEdgeAttributes(prim1, prim2);
    },
    updateEdgeAttributes: (prim0, prim1, prim2) => {
      prim0.updateEdgeAttributes(prim1, prim2);
    },
    updateEachEdgeAttributes: (prim0, prim1) => {
      prim0.updateEachEdgeAttributes(prim1);
    },
    NodesIter: NodesIter,
    EdgesIter: EdgesIter,
    NeighborsIter: NeighborsIter,
    $$import: (prim0, prim1, prim2) => {
      prim0.import(prim1, prim2 !== undefined ? Primitive_option.valFromOption(prim2) : undefined);
    },
    $$export: prim => prim.export(),
    inspect: prim => prim.inspect(),
    Generators: Generators,
    Layout: Layout,
    ShortestPath: ShortestPath,
    SimplePath: SimplePath,
    SVG: SVG,
    GEXF: GEXF,
    Traversal: Traversal,
    Utils: Utils
  };
}

export {
  MakeGraph,
}
/* graphology Not a pure module */
