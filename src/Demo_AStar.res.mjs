// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Nodefs from "node:fs";
import * as Graphology__Graph from "./Graphology__Graph.res.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function stringToFile(str, fileName) {
  Nodefs.writeFileSync(fileName, Buffer.from(str));
}

var G = Graphology__Graph.MakeGraph({});

var g = G.makeUndirectedGraph();

function makeNodeKey(param) {
  return param[0].toString() + "," + param[1].toString();
}

function addNode(r, c) {
  var key = makeNodeKey([
        r,
        c
      ]);
  return G.mergeNode(g, key, {
                x: c,
                y: r
              })[0];
}

G.mergeNode(g, addNode(0, 0), undefined);

G.mergeEdge(g, addNode(0, 0), addNode(0, 1), undefined);

G.mergeEdge(g, addNode(0, 0), addNode(1, 0), undefined);

G.mergeEdge(g, addNode(0, 1), addNode(0, 0), undefined);

G.mergeEdge(g, addNode(0, 1), addNode(0, 2), undefined);

G.mergeEdge(g, addNode(0, 1), addNode(1, 1), undefined);

G.mergeEdge(g, addNode(0, 2), addNode(0, 1), undefined);

G.mergeEdge(g, addNode(0, 2), addNode(0, 3), undefined);

G.mergeEdge(g, addNode(0, 2), addNode(1, 2), undefined);

G.mergeEdge(g, addNode(0, 3), addNode(0, 2), undefined);

G.mergeEdge(g, addNode(0, 3), addNode(1, 3), undefined);

G.mergeEdge(g, addNode(1, 0), addNode(0, 0), undefined);

G.mergeEdge(g, addNode(1, 0), addNode(1, 1), undefined);

G.mergeEdge(g, addNode(1, 1), addNode(0, 1), undefined);

G.mergeEdge(g, addNode(1, 1), addNode(1, 0), undefined);

G.mergeEdge(g, addNode(1, 1), addNode(1, 2), undefined);

G.mergeEdge(g, addNode(1, 2), addNode(0, 2), undefined);

G.mergeEdge(g, addNode(1, 2), addNode(1, 1), undefined);

G.mergeEdge(g, addNode(1, 2), addNode(1, 3), undefined);

G.mergeEdge(g, addNode(1, 3), addNode(0, 3), undefined);

G.mergeEdge(g, addNode(1, 3), addNode(1, 2), undefined);

G.mergeEdge(g, addNode(1, 3), addNode(1, 4), undefined);

G.mergeEdge(g, addNode(2, 2), addNode(1, 2), undefined);

G.mergeEdge(g, addNode(2, 2), addNode(3, 2), undefined);

G.mergeEdge(g, addNode(2, 5), addNode(2, 6), undefined);

G.mergeEdge(g, addNode(2, 5), addNode(3, 5), undefined);

G.mergeEdge(g, addNode(2, 6), addNode(2, 5), undefined);

G.mergeEdge(g, addNode(2, 6), addNode(2, 7), undefined);

G.mergeEdge(g, addNode(2, 6), addNode(3, 6), undefined);

G.mergeEdge(g, addNode(3, 1), addNode(3, 2), undefined);

G.mergeEdge(g, addNode(3, 2), addNode(2, 2), undefined);

G.mergeEdge(g, addNode(3, 2), addNode(3, 1), undefined);

G.mergeEdge(g, addNode(3, 2), addNode(3, 3), undefined);

G.mergeEdge(g, addNode(3, 3), addNode(3, 2), undefined);

G.mergeEdge(g, addNode(3, 3), addNode(3, 4), undefined);

G.mergeEdge(g, addNode(3, 4), addNode(3, 3), undefined);

G.mergeEdge(g, addNode(3, 4), addNode(3, 5), undefined);

G.mergeEdge(g, addNode(3, 5), addNode(2, 5), undefined);

G.mergeEdge(g, addNode(3, 5), addNode(3, 4), undefined);

G.mergeEdge(g, addNode(3, 5), addNode(3, 6), undefined);

G.mergeEdge(g, addNode(3, 6), addNode(2, 6), undefined);

G.mergeEdge(g, addNode(3, 6), addNode(3, 5), undefined);

G.mergeEdge(g, addNode(3, 6), addNode(3, 7), undefined);

G.mergeEdge(g, addNode(3, 7), addNode(2, 7), undefined);

G.mergeEdge(g, addNode(3, 7), addNode(3, 6), undefined);

function writeToFile(g, filename) {
  var gexfStrWithOptions = G.GEXF.write(g, {
        formatNode: (function (key, _attributes) {
            return {
                    label: key,
                    attributes: {
                      name: key,
                      x: (parseInt(_attributes.x) * 100.0).toFixed(2),
                      y: (parseInt(_attributes.y) * 100.0).toFixed(2)
                    }
                  };
          }),
        formatEdge: (function (key, _attributes) {
            return {
                    label: key,
                    attributes: {
                      name: key
                    }
                  };
          }),
        version: "1.3"
      });
  stringToFile(gexfStrWithOptions, filename);
}

var GEXF = {
  writeToFile: writeToFile
};

function manDistance(node, finalTarget) {
  console.log(node);
  console.log(finalTarget);
  return 1;
}

var prim = G.inspect(g);

console.log(prim);

writeToFile(g, "astar.gexf");

var res = G.ShortestPath.AStar.bidirectional(g, addNode(0, 0), addNode(3, 7), {
      NAME: "Getter",
      VAL: (function (e, param) {
          console.log(e);
          return 1;
        })
    }, (function (node, finalTarget) {
        var d = manDistance(node, finalTarget);
        ((function (__x) {
                console.log("node", __x);
              })(node));
        ((function (__x) {
                console.log("finalTarget", __x);
              })(finalTarget));
        ((function (__x) {
                console.log("d", __x);
              })(d));
        return d;
      }));

console.log(res);

export {
  log ,
  log2 ,
  stringToFile ,
  G ,
  g ,
  makeNodeKey ,
  addNode ,
  GEXF ,
  manDistance ,
  res ,
}
/* G Not a pure module */
